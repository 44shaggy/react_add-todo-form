{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","api/todos.ts","App.tsx","index.tsx"],"names":["UserInfo","user","className","href","email","name","TodoInfo","todo","completed","id","title","TodoList","todos","map","username","userId","getUser","usersFromServer","find","todosWithUserProp","todosFromServer","App","useState","updateTodos","setUser","setTitle","hasUser","setHasUser","hasTitle","setHasTitle","action","method","onSubmit","event","preventDefault","newTodo","Math","max","htmlFor","type","value","onChange","target","placeholder","disabled","userFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9da178ef.chunk.js","sourcesContent":["import { User } from '../../types/User';\n\ntype Props = {\n  user: User | null,\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => (\n  <a className=\"UserInfo\" href={`mailto:${user?.email}`}>\n    {user?.name}\n  </a>\n);\n","import { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo,\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const completed = `TodoInfo${\n    todo.completed ? ' TodoInfo--completed' : ''}`;\n\n  return (\n    <article className={completed} data-id={todo.id}>\n      <h2 className=\"TodoInfo__title\">{todo.title}</h2>\n\n      <UserInfo user={todo.user} />\n    </article>\n  );\n};\n","import { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todo[],\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map(todo => (\n      <TodoInfo todo={todo} key={todo.id} />\n    ))}\n  </section>\n);\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import { useState } from 'react';\nimport './App.scss';\nimport { User } from './types/User';\nimport { Todo } from './types/Todo';\n\nimport { TodoList } from './components/TodoList';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nfunction getUser(userId: number): User | null {\n  const foundUser = usersFromServer.find(user => user.id === userId);\n\n  return foundUser || null;\n}\n\nexport const todosWithUserProp: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUser(todo.userId),\n}));\n\nexport const App = () => {\n  const [todos, updateTodos] = useState(todosWithUserProp);\n  const [user, setUser] = useState(0);\n  const [title, setTitle] = useState('');\n  const [hasUser, setHasUser] = useState(true);\n  const [hasTitle, setHasTitle] = useState(true);\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        id=\"form\"\n        onSubmit={(event) => {\n          event.preventDefault();\n\n          if (title && user) {\n            const newTodo = {\n              id: Math.max(...todosFromServer.map(todo => todo.id)) + 1,\n              title,\n              completed: false,\n              userId: user,\n              user: getUser(user),\n            };\n\n            updateTodos([\n              ...todos,\n              newTodo,\n            ]);\n\n            setUser(0);\n            setTitle('');\n\n            return;\n          }\n\n          if (!title) {\n            setHasTitle(false);\n          }\n\n          if (!user) {\n            setHasUser(false);\n          }\n        }}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"title\">Title: </label>\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            id=\"title\"\n            value={title}\n            onChange={event => {\n              setHasTitle(true);\n              setTitle(event.target.value);\n            }}\n            placeholder=\"Enter a title\"\n          />\n          {!hasTitle && (\n            <span className=\"error\">Please enter a title</span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"user\">User: </label>\n          <select\n            data-cy=\"userSelect\"\n            id=\"user\"\n            value={user}\n            onChange={event => {\n              setHasUser(true);\n              setUser(+event.target.value);\n            }}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n            {usersFromServer.map(userFromServer => (\n              <option\n                value={userFromServer.id}\n                key={userFromServer.id}\n              >\n                {userFromServer.name}\n              </option>\n            ))}\n          </select>\n\n          {!hasUser && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}